<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Echo-Mechanik */

SecondsSinceLastCommunication = 0
SecondsBetweenCommunication = 3
NumberOfEchosToCreate = 3

/* Furz-Mechanik */
NumberOfFartsToCreate = 2

/* Boost-Mechanik */
SecondsBetweenBoosts = 0.5
SecondsSinceLastBoost = 0

//Verringere die Geschwindigkeit des Boosts pro Sekunde
BoostDeceleration = 4500 / (room_speed * room_speed)

Facing = 0
ChosenImage = 0

/* Luft */
LuftVoll = 100
Luft = 50

/* Wahnsinn */
Insanity = 0
FullInsanity = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Bewegung */

//if keyboard_check_pressed(ord('J')) {
//   MySpeed = 9000 / room_speed
//} else {
    MySpeed = 300 / room_speed
//} 

speed = 0

if keyboard_check(ord('W')) {
    vspeed = -MySpeed
}
if keyboard_check(ord('S')) {
    vspeed = MySpeed
}
if keyboard_check(ord('A')) {
    hspeed = -MySpeed
}
if keyboard_check(ord('D')) {
    hspeed = MySpeed
}


/* Kollisionsabfrage */

if place_meeting(x + hspeed, y + vspeed, oSolid) {

    //Keep as much of our horizontal speed as possible
    OldHSpeed = hspeed
    hspeed = 0
    while
        place_meeting(x + hspeed + sign(OldHSpeed), y, oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old hspeed
        abs(hspeed) &lt; abs(OldHSpeed) //Check we haven't restored all of our old hspeed, and only pay attention to the 'absolute' values, the magnitudes
    {
        //Creep towards old hspeed
        hspeed = hspeed + sign(OldHSpeed)
    }   
    
    //We have now figured out how much of our hspeed we can keep without hitting anything, so we're keeping that.

    //Keep as much of our horizontal speed as possible
    OldVSpeed = vspeed
    vspeed = 0
    while
        place_meeting(x + hspeed, y + vspeed + sign(OldVSpeed), oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old vspeed
        abs(vspeed) &lt; abs(OldVSpeed) //Check we haven't restored all of our old vspeed, and only pay attention to the 'absolute' values, the magnitudes
    {
        //Creep towards old hspeed
        vspeed = vspeed + sign(OldVSpeed)
    }     

}


/* Facing */

Facing = direction

if direction = 0 {
    ChosenImage = 0
    image_yscale = 1
}
if direction = 45 {
    ChosenImage = 0
    image_yscale = 1
}
if direction = 315 {
    ChosenImage = 0
    image_yscale = 1    
}
if direction = 180 {
    ChosenImage = 0
    image_yscale = - 1    
}
if direction = 135 {
    ChosenImage = 0
    image_yscale = - 1
}
if direction = 225 {
    ChosenImage = 0 
    image_yscale = - 1    
}
if direction = 90 {
    ChosenImage = 1
//    image_xscale = 1
}
if direction = 270 {
    ChosenImage = 1
//    image_xscale = - 1
}


/* Luft-Mechanik */

//Wenn noch nicht erstickt
if Luft &gt; 0 {
    LuftAtmen = instance_place(x,y,oWaterline)
    //Verringere Luft, wenn nicht an der Wasserlinie
    if !instance_exists(LuftAtmen) {
        if Insanity &lt; 30 {
        Luft = Luft - 2/room_speed
        } else { Luft = Luft - 4/room_speed  }
    //Wenn Luft noch nicht voll    
    } else if Luft &lt;= LuftVoll and instance_exists(LuftAtmen) {
    Luft = Luft + 10/room_speed
    }
} else { instance_destroy() }


/* Insanity-Mechanik */

//Werde Wahnsinnig an der Oberfl√§che
if Insanity &lt; FullInsanity {
    BecomeInsane = instance_place(x,y,oWaterline)  
    if instance_exists(BecomeInsane) {
        Insanity = Insanity + 5/room_speed
    }
} else { Insanity = FullInsanity }

if Insanity &lt; 0 { Insanity = 0 }

//Behandlung durch Essen
TreatInsanityByEating = instance_place(x,y,oFishi)
if instance_exists(TreatInsanityByEating) {
    with TreatInsanityByEating { ExplodeIntoANumberOfChunks(25,oFishiChunk) }
    audio_play_sound(aCrunch,1,false)
    Insanity = Insanity - 1
}

//Behandlung durch Kommunizieren
TreatInsanityByCommunicating = instance_place(x,y,oFriend)
SecondsSinceLastCommunication = SecondsSinceLastCommunication + 1/room_speed
EchosCreatedSoFar = 0
FartsCreatedSoFar = 0
if instance_exists(TreatInsanityByCommunicating) {
    if SecondsSinceLastCommunication &gt;= SecondsBetweenCommunication {
        SecondsSinceLastCommunication = 0
        if Insanity &lt; 60 {
            Insanity = Insanity - 1
            while EchosCreatedSoFar &lt; NumberOfEchosToCreate {
                instance_create(x,y,oEcho)
                EchosCreatedSoFar = EchosCreatedSoFar + 1
            }
        } else {
            Insanity = Insanity + 1
            while FartsCreatedSoFar &lt; NumberOfFartsToCreate {
                instance_create(x,y,oFart)
                FartsCreatedSoFar = FartsCreatedSoFar + 1
            }
        }
    }
}

/* Innerhalb des Raumes und Wassers bleiben */ 

if x &lt; 0 { x = 0 }
if y &lt; 217 { y = 217 }
if x &gt; room_width { x = room_width }
if y &gt; room_height { y = room_height }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw our sprite normally, but facing our 'Facing' direction, without changing image_angle, so as not to affect collision. What. This makes sense. I'm not on trial here.

draw_sprite_ext(sprite_index,ChosenImage,x,y,image_xscale,image_yscale,Facing,image_blend,image_alpha)
//draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,Facing,image_blend,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>31,18</point>
    <point>31,31</point>
  </PhysicsShapePoints>
</object>
